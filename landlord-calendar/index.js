var express = require('express');
var bodyParser = require('body-parser');
var { graphqlExpress, graphiqlExpress } = require('apollo-server-express');
var { makeExecutableSchema } = require('graphql-tools');
var { graphql, buildSchema } = require('graphql');

// Construct a schema, using GraphQL schema language
var schema = buildSchema(`
    
    type Profile {
        firstname: String
        name: String
    }
    
    type User {
        usertype: String
        __typename: String
        profile: Profile
    }
    
    type Address {
        street: String
        houseNumber: String
        city: String
        country: String
        zipCode: String
        __typename: String
    }
    
    type Property {
        id: String
        name: String
        inviteeCount: Int
        __typename: String
        user: User
        attachments: [String]
        address: Address
    }
    
    type Nodes {
        id: String
        date: String
        maxInviteeCount: Int
        attendeeCount: Int
        __typename: String
        property: Property
    }
    
    type Appointments {
        __typename: String
        page: Page
        nodes: [Nodes]
    }
    
    type Data {
        appointments: Appointments
    }
    
    type AutogeneratedMainType {
        data: Data
    }
`);

// The root provides a resolver function for each API endpoint
const root =  {
    readJson: () => JSON.parse(fs.readFileSync('./app/src/landlord-calendar/jhiemer/data.json', 'utf8'))
};

var resolvers = {
    Appointments: {
       appointment(root) {
           return root.map(apptm => apptm.data()) as Appointment[];
       }

      }
    }
  };
  
  var schema = makeExecutableSchema({typeDefs, resolvers});
  var app = express();
  app.use('/graphql', bodyParser.json(), graphqlExpress({schema}));
  app.use('/graphiql', graphiqlExpress({endpointURL: '/graphql'}));
  app.listen(4000, () => console.log('Now browse to localhost:4000/graphiql'));

// Run the GraphQL query '{ hello }' and print out the response
graphql(schema, '{ hello }', root).then((response) => {
    console.log(response);
});