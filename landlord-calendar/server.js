var { graphql, buildSchema } = require('graphql');

// Construct a schema, using GraphQL schema language
var schema = buildSchema(`
    type Page {
        cursor: String
        hasNext: Boolean
        hasPrev: Boolean
        next: Int
        page: Int
        prev: Int
        size: Int
        totalElements: Int
        totalPages: Int
        __typename: String
    }
    
    type Profile {
        firstname: String
        name: String
        phone: String
        gender: String
        title: String
    }
    
    type User {
        usertype: String
        __typename: String
        profile: Profile
    }
    
    type Address {
        street: String
        houseNumber: String
        city: String
        country: String
        zipCode: String
        __typename: String
    }
    
    type Property {
        id: String
        name: String
        inviteeCount: Int
        __typename: String
        user: User
        attachments: [String]
        address: Address
    }
    
    type Contact {
        firstName: String
        name: String
        email: String
        mobile: String
        phone: String
        fullName: String
    }
    
    type Nodes {
        id: String
        date: String
        maxInviteeCount: Int
        attendeeCount: Int
        showContactInformation: Boolean
        __typename: String
        property: Property
        contact: Contact
    }
    
    type Appointments {
        __typename: String
        page: Page
        nodes: [Nodes]
    }
    
    type Data {
        appointments: Appointments
    }
    
    type AutogeneratedMainType {
        data: Data
    }
`);

// The root provides a resolver function for each API endpoint
var root = {
    hello: () => {
        return 'Hello world!';
    },
};

// Run the GraphQL query '{ hello }' and print out the response
graphql(schema, '{ hello }', root).then((response) => {
    console.log(response);
});